import { imgCaptionType, imgFitModes } from './const';
export interface ImgProps {
    aspectRatio?: string;
    objectFit?: string;
    caption?: string;
    captionMode?: string;
    captionType?: string;
}
declare function __VLS_template(): {
    default?(_: {}): any;
};
declare const __VLS_component: import('vue').DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToOption<ImgProps>, {
    aspectRatio: string;
    objectFit: imgFitModes;
    captionType: imgCaptionType;
}>, {}, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    loaded: (event: Event) => void;
    error: (errorMessage: string) => void;
}, string, import('vue').PublicProps, Readonly<import('vue').ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToOption<ImgProps>, {
    aspectRatio: string;
    objectFit: imgFitModes;
    captionType: imgCaptionType;
}>>> & {
    onError?: ((errorMessage: string) => any) | undefined;
    onLoaded?: ((event: Event) => any) | undefined;
}, {
    aspectRatio: string;
    objectFit: string;
    captionType: string;
}, {}>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, ReturnType<typeof __VLS_template>>;
export default _default;
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToOption<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
